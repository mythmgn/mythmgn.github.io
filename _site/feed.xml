<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.4">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2018-09-30T13:37:39+08:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">慎见慎思</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><entry><title type="html">Welcome to Jekyll!</title><link href="http://localhost:4000/jekyll/update/2018/09/30/welcome-to-jekyll.html" rel="alternate" type="text/html" title="Welcome to Jekyll!" /><published>2018-09-30T13:21:24+08:00</published><updated>2018-09-30T13:21:24+08:00</updated><id>http://localhost:4000/jekyll/update/2018/09/30/welcome-to-jekyll</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2018/09/30/welcome-to-jekyll.html">&lt;p&gt;You’ll find this post in your &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;To add new posts, simply add a file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory that follows the convention &lt;code class=&quot;highlighter-rouge&quot;&gt;YYYY-MM-DD-name-of-post.ext&lt;/code&gt; and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;https://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><summary type="html">You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.</summary></entry><entry><title type="html">Python keywords</title><link href="http://localhost:4000/programming/2018/09/10/python-keywords.html" rel="alternate" type="text/html" title="Python keywords" /><published>2018-09-10T00:00:00+08:00</published><updated>2018-09-10T00:00:00+08:00</updated><id>http://localhost:4000/programming/2018/09/10/%5Bpython%5D%20keywords</id><content type="html" xml:base="http://localhost:4000/programming/2018/09/10/python-keywords.html">&lt;p&gt;[TOC]&lt;/p&gt;

&lt;h1 id=&quot;1__xx__&quot;&gt;1.__xx__&lt;/h1&gt;

&lt;h2 id=&quot;__repr__&quot;&gt;__repr__&lt;/h2&gt;

&lt;p&gt;My rule of thumb: &lt;strong&gt;repr&lt;/strong&gt; is for developers, &lt;strong&gt;str&lt;/strong&gt; is for customers.&lt;/p&gt;

&lt;h2 id=&quot;__future__&quot;&gt;__future__&lt;/h2&gt;
&lt;p&gt;division
absolute_import&lt;/p&gt;

&lt;h2 id=&quot;_getstate_--__setstate__&quot;&gt;_&lt;em&gt;getstate_&lt;/em&gt; / __setstate__&lt;/h2&gt;
&lt;p&gt;object.__&lt;strong&gt;getstate__()
Classes can further influence how their instances are pickled; if the class defines the method ___getstate&lt;/strong&gt;(), it is called and the returned object is pickled as the contents for the instance, instead of the contents of the instance’s dictionary. If the __getstate__() method is absent, the instance’s __dict__ is pickled as usual.
object.&lt;em&gt;&lt;strong&gt;setstate&lt;/strong&gt;&lt;/em&gt;(state)¶
Upon unpickling, if the class defines &lt;strong&gt;setstate&lt;/strong&gt;(), it is called with the unpickled state. In that case, there is no requirement for the state object to be a dictionary. Otherwise, the pickled state must be a dictionary and its items are assigned to the new instance’s dictionary.
Note
If &lt;strong&gt;getstate&lt;/strong&gt;() returns a false value, the &lt;strong&gt;setstate&lt;/strong&gt;() method will not be called upon unpickling.&lt;/p&gt;

&lt;h2 id=&quot;__getattribute__--getattr&quot;&gt;__getattribute__ / &lt;strong&gt;getattr&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;getattribute&lt;/strong&gt; is invoked before looking at the actual attributes on the object, and so can be tricky to implement correctly.  You can end up in infinite recursions very easily.
New-style classes derive from object, old-style classes are those in Python 2.x with no explicit base class.  But the distinction between old-style and new-style classes is not the important one when choosing between &lt;strong&gt;getattr&lt;/strong&gt; and &lt;strong&gt;getattribute&lt;/strong&gt;.&lt;/p&gt;

&lt;h1 id=&quot;2-algorithm-functions&quot;&gt;2. Algorithm functions&lt;/h1&gt;
&lt;h2 id=&quot;all--any&quot;&gt;all / any&lt;/h2&gt;

&lt;h1 id=&quot;3-python-features&quot;&gt;3. Python features&lt;/h1&gt;
&lt;h2 id=&quot;31-yield&quot;&gt;3.1 yield&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;a lot more memory efficient and faster too
*
Note that a for loop doesn’t know what kind of object it’s dealing with - it just follows the iterator protocol, and is happy to get item after item as it calls next(). Built-in lists return their items one by one, dictionaries return the keys one by one, files return the lines one by one, etc. And generators return… well that’s where yield comes in:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f123&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f123&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Instead of yield statements, if you had three return statements in f123() only the first would get executed, and the function would exit. But f123() is no ordinary function. When f123() is called, itdoes not return any of the values in the yield statements! It returns a generator object. Also, the function does not really exit - it goes into a suspended state. When the for loop tries to loop over the generator object, the function resumes from its suspended state, runs until the next yield statement and returns that as the next item. This happens until the function exits, at which point the generator raisesStopIteration, and the loop exits.
So the generator object is sort of like an adapter - at one end it exhibits the iterator protocol, by exposing__iter__() and next() methods to keep the for loop happy. At the other end however, it runs the function just enough to get the next value out of it, and puts it back in suspended mode.&lt;/p&gt;

&lt;h2 id=&quot;32-lambda&quot;&gt;3.2 lambda&lt;/h2&gt;

&lt;p&gt;lambda is just a fancy way of saying function. Other than its name, there is nothing obscure, intimidating or cryptic about it. When you read the following line, replace lambda by function in your mind:&lt;/p&gt;

&lt;p&gt;a. list lambda
mult3 = [x for x in [1, 2, 3, 4, 5, 6, 7, 8, 9] if x % 3 == 0]&lt;/p&gt;

&lt;p&gt;b. function lambda&lt;/p&gt;

&lt;p&gt;f = lambda x: x&lt;em&gt;*2 + 2&lt;/em&gt;x - 5&lt;/p&gt;</content><author><name></name></author><category term="python," /><category term="keywords" /><summary type="html">[TOC]</summary></entry><entry><title type="html">逐渐消失的周礼和汹涌的圣母心</title><link href="http://localhost:4000/%E6%85%8E%E8%A7%81%E6%85%8E%E6%80%9D/2018/09/10/%E5%A4%A7%E5%9B%BD%E5%AE%AA%E5%88%B6.html" rel="alternate" type="text/html" title="逐渐消失的周礼和汹涌的圣母心" /><published>2018-09-10T00:00:00+08:00</published><updated>2018-09-10T00:00:00+08:00</updated><id>http://localhost:4000/%E6%85%8E%E8%A7%81%E6%85%8E%E6%80%9D/2018/09/10/%E5%A4%A7%E5%9B%BD%E5%AE%AA%E5%88%B6</id><content type="html" xml:base="http://localhost:4000/%E6%85%8E%E8%A7%81%E6%85%8E%E6%80%9D/2018/09/10/%E5%A4%A7%E5%9B%BD%E5%AE%AA%E5%88%B6.html">&lt;p&gt;[TOC]&lt;/p&gt;

&lt;p&gt;和平与秩序无论是国、还是家最重要的部分。过去几十年为什么农村保留了较为完整的祭祀等制度，还是农村的社会组织形式和祭祀制度相互需要。&lt;/p&gt;

&lt;h2 id=&quot;祭祀制度&quot;&gt;祭祀制度&lt;/h2&gt;
&lt;h3 id=&quot;齐家&quot;&gt;齐家&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;皇权与绅权分治一直是中国宪制的基本格局
    &lt;ul&gt;
      &lt;li&gt;“家”中的事务治理一般依赖不了皇权，清官难断家务事&lt;/li&gt;
      &lt;li&gt;皇权一般赋予当地一定绅权或者福利进行权利分治&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;齐家中的家更多指的是五福内的家族及出五福的宗族&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;血缘纽带&quot;&gt;血缘纽带&lt;/h4&gt;
&lt;p&gt;户、室、房、房支&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;稳定的管理
    &lt;ul&gt;
      &lt;li&gt;修桥修路&lt;/li&gt;
      &lt;li&gt;抗旱抗涝&lt;/li&gt;
      &lt;li&gt;婚丧嫁娶&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;长幼有序&quot;&gt;长幼有序&lt;/h2&gt;
&lt;p&gt;君君臣臣，夫&lt;/p&gt;

&lt;h3 id=&quot;父慈子孝&quot;&gt;父慈子孝&lt;/h3&gt;

&lt;h3 id=&quot;男女关系&quot;&gt;男女关系&lt;/h3&gt;
&lt;p&gt;男女关系是延续村落非常重要的一环。一纵一横（父子的纵向关系和兄弟间的横向关系）的关系是稳定的，
但缺乏流动性和创造力；男女关系是流动的，充满创造力和颠覆性，但伴生着危险，打破原有稳定秩序的风险。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;像弑父娶母、杀兄偷嫂、勾引小叔子类. 国内外都有不同的文学经典进行了示例
男女有别： 男人由体力提供生活物资，女人抚养下一代；男女间进行乱伦大防，防止影响村落组织的稳定性
一旦出现打破原有稳定组织结构的男女关系发生，会对原关系网产生波动、最后很可能由整个村落进行埋单 （像电影杀生）&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;因此无论是男女有别、同姓不婚、从夫居住等都是为了有效、便利地构成和组成农耕、人力驱动的村落组织，
并保持它的稳定性。&lt;/p&gt;

&lt;h1 id=&quot;碎片化想法&quot;&gt;碎片化想法&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;保持组织发展的几个要素：
    &lt;ul&gt;
      &lt;li&gt;结构稳定&lt;/li&gt;
      &lt;li&gt;团结协作&lt;/li&gt;
      &lt;li&gt;保持流动性（或 保持创造力）&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;##&lt;/p&gt;</content><author><name></name></author><category term="政治" /><category term="思考" /><summary type="html">[TOC]</summary></entry></feed>